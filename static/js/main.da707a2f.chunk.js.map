{"version":3,"sources":["components/Logo/Logo.js","components/Navigation/Navigation.js","components/FaceRecog/FaceRecog.js","components/ImageLinkForm/ImageLinkForm.js","constants.js","App.js","serviceWorker.js","index.js","components/Logo/logo.png"],"names":["Logo","className","options","max","style","height","width","src","logo","alt","Navigation","display","justifyContent","FaceRecog","boxes","imageUrl","boxLocations","length","map","box","i","key","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","id","ImageLinkForm","onInputChange","onSubmit","onChange","onKeyDown","event","keyCode","type","onClick","partclsOptns","particles","number","value","density","enable","value_area","line_linked","shadow","color","blur","app","Clarifai","App","apiKey","setState","input","target","calculateFaceLocations","response","faceBoxes","outputs","data","regions","info","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","getPredictions","url","models","predict","FACE_DETECT_MODEL","then","catch","err","console","log","state","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.da707a2f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport \"./Logo.css\";\r\nimport logo from \"./logo.png\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"ml2 mt0\">\r\n      <Tilt\r\n        className=\"Tilt br2 shadow-2\"\r\n        options={{ max: 25 }}\r\n        style={{ height: 150, width: 150 }}\r\n      >\r\n        <div className=\"Tilt-inner\">\r\n          <img\r\n            style={{\r\n              height: \"150px\",\r\n              width: \"150px\",\r\n            }}\r\n            src={logo}\r\n            alt=\"logo\"\r\n          ></img>{\" \"}\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport Logo from \"../Logo/Logo\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n      }}\r\n      className=\"mt3\"\r\n    >\r\n      <Logo />\r\n      {/* <p className=\"f3 link dim black pa3 pointer\">Sign Out</p> */}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./FaceRecog.css\";\r\n\r\nconst FaceRecog = ({ boxes, imageUrl }) => {\r\n  var boxLocations = [];\r\n  if (boxes.length) {\r\n    boxLocations = boxes.map((box, i) => (\r\n      <div\r\n        key={i}\r\n        className=\"bounding-box\"\r\n        style={{\r\n          top: box.topRow,\r\n          right: box.rightCol,\r\n          bottom: box.bottomRow,\r\n          left: box.leftCol,\r\n        }}\r\n      ></div>\r\n    ));\r\n  }\r\n\r\n  return boxes.length ? (\r\n    <div className=\"faceCntr ma\">\r\n      <div className=\"absolute mt2\">\r\n        <img id=\"inputImage\" alt=\"\" src={imageUrl} width=\"700\" height=\"auto\" />\r\n        <div\r\n          className=\"bounding-box\"\r\n          style={{\r\n            top: boxes[0].topRow,\r\n            right: boxes[0].rightCol,\r\n            bottom: boxes[0].bottomRow,\r\n            left: boxes[0].leftCol,\r\n          }}\r\n        ></div>\r\n        {boxLocations}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className=\"faceCntr ma\">\r\n      <div className=\"absolute mt2\">\r\n        <img id=\"inputImage\" alt=\"\" src={imageUrl} width=\"700\" height=\"auto\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaceRecog;\r\n","import React from \"react\";\r\n\r\nconst ImageLinkForm = ({ onInputChange, onSubmit }) => {\r\n  const enterEven = (event) => {\r\n    if (event.keyCode === 13) onSubmit();\r\n  };\r\n  return (\r\n    <div>\r\n      <p className=\"f3\">\r\n        This Smart Brain can detect faces in a picture. Give it a try..\r\n      </p>\r\n      <div className=\"center\" style={{ width: \"65%\" }}>\r\n        <div className=\"pa4 br3 shadow-5\">\r\n          <input\r\n            onChange={onInputChange}\r\n            onKeyDown={enterEven}\r\n            className=\"f4 pa2 w-60 center\"\r\n            type=\"text\"\r\n          ></input>\r\n          <button\r\n            onClick={onSubmit}\r\n            className=\"w-40 grow br3 f4 link ph1 mt3 pv2 dib white bg-light-purple\"\r\n          >\r\n            Detect\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","export const partclsOptns = {\r\n  particles: {\r\n    number: {\r\n      value: 100,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800,\r\n      },\r\n    },\r\n    line_linked: {\r\n      shadow: {\r\n        enable: true,\r\n        color: \"#3ca9d1\",\r\n        blur: 5,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Navigation from \"./components/Navigation/Navigation\";\nimport FaceRecog from \"./components/FaceRecog/FaceRecog\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport Particles from \"react-particles-js\";\nimport { partclsOptns } from \"./constants\";\nimport Clarifai from \"clarifai\";\n\nconst app = new Clarifai.App({\n  apiKey: \"e883ddd9fa7e43cfbf61b2c541b67139\",\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      boxes: [],\n    };\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value, boxes: [], imageUrl: \"\" });\n  };\n\n  calculateFaceLocations = (response) => {\n    const faceBoxes = response.outputs[0].data.regions.map(\n      (info) => info.region_info.bounding_box\n    );\n    const image = document.getElementById(\"inputImage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return faceBoxes.map((box) => {\n      return {\n        leftCol: box.left_col * width,\n        topRow: box.top_row * height,\n        rightCol: width - box.right_col * width,\n        bottomRow: height - box.bottom_row * height,\n      };\n    });\n  };\n\n  displayFaceBox = (boxes) => {\n    this.setState({ boxes: boxes });\n  };\n\n  getPredictions = (url) => {\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, url)\n      .then((response) =>\n        this.displayFaceBox(this.calculateFaceLocations(response))\n      )\n      .catch((err) => console.log(err));\n  };\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input }, () =>\n      this.getPredictions(this.state.imageUrl)\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={partclsOptns} />\n        <Navigation />\n        {/* <Rank /> */}\n        <ImageLinkForm\n          onInputChange={this.onInputChange}\n          onSubmit={this.onSubmit}\n        />\n        <FaceRecog boxes={this.state.boxes} imageUrl={this.state.imageUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.27777662.png\";"],"sourceRoot":""}